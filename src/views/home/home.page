@IGNORE@
<link rel="stylesheet" href="/views/home/home.css">
<script src="https://unpkg.com/mermaid/dist/mermaid.min.js"></script>

<script>
    mermaid.initialize({
        startOnLoad: true,
        theme: document.body.classList.contains('vscode-dark') || document.body.classList.contains('vscode-high-contrast')
            ? 'dark'
            : 'default'
    });
</script>
<h1 id="hello-world">Hello World</h1>
<h2 id="neue-seite-erstellen">Neue Seite erstellen</h2>
<p>Um eine neue Seite zu erstellen, solltest du immer das SpideySense CLI Tool verwenden.
    Mit diesem kannst du mit dem folgenden Befehl neue Seiten hinzufügen, auf die du anschließend auch gleich zugreifen
    kannst (<strong>muss aus dem ./src Ordner aufgerufen werden</strong>):</p>
<pre class="hljs"><code><div>spideysense page myPageName
</div></code></pre>
<p>Deine Webseite kannst du jederzeit mit diesem Befehl starten:</p>
<pre class="hljs"><code><div>spideysense <span class="hljs-built_in">start</span>
</div></code></pre>
<p>Mit Strg+C beendest du den Server.</p>
<h2 id="neuen-service-erstellen">Neuen Service erstellen</h2>
<p>In den meisten Fällen willst du Daten aus deiner Datenbank in deiner View anzeigen. Der Code zum Daten
    bekommen sollst du in sogenannte Services auslagern.
    Einen neuen Service erstellst du so:</p>
<pre class="hljs"><code><div>spideysense service myNewService
</div></code></pre>
<p>Deine Page soll diesen Service nun einbinden um so an ihre Daten zu gelangen.
    Andere Klassen einbinden sollst du immer über den ServiceProvider und nie über ein require und new! Diese Methodik
    nennt sich <a href="https://de.wikipedia.org/wiki/Dependency_Injection">Dependency Injection</a>.</p>
<pre class="hljs"><code><div><span class="hljs-comment">//home.js</span>
<span class="hljs-keyword">const</span> ServiceProvider = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../../../framework/service_provider"</span>);

...
constructor(params){
    <span class="hljs-comment">//Gibt eine Instanz eines TestServices zurück den du verwenden kannst,</span>
    <span class="hljs-comment">//ohne zu wissen wie ein TestService erstellt wird</span>
    <span class="hljs-keyword">this</span>.testService = ServiceProvider.create(<span class="hljs-string">"testService"</span>);
}

data(){
    <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">importantData</span>: <span class="hljs-keyword">this</span>.testService.getData()
    };
}
...
</div></code></pre>
<pre class="hljs"><code><div><span class="hljs-comment">//test_service.js</span>
...

getData(){
    <span class="hljs-comment">//TODO query db to retrieve real data</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello World'</span>;
}

...

</div></code></pre>
<h2 id="daten-in-der-view-anzeigen">Daten in der View anzeigen</h2>
<p>Nun musst du nur mehr die Daten anzeigen. Auf Variablen der data() Funktion greifst du mit {{ }} zu:</p>
<pre class="hljs"><code><div><span class="hljs-comment">&lt;!-- home.page --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{ importantData }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
</div></code></pre>